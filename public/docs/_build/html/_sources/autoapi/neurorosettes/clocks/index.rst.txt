:py:mod:`neurorosettes.clocks`
==============================

.. py:module:: neurorosettes.clocks

.. autoapi-nested-parse::

   This module deals with the proliferation, differentiation and death cycles



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neurorosettes.clocks.Cycle
   neurorosettes.clocks.Death
   neurorosettes.clocks.Differentiation
   neurorosettes.clocks.CellClocks




.. py:class:: Cycle

   Represents the cell cycle (arrest/proliferation)

   .. py:attribute:: proliferation_rate
      :annotation: :Optional[float]

      

   .. py:attribute:: division_signal
      :annotation: :bool

      

   .. py:attribute:: cycle_block
      :annotation: :bool

      

   .. py:method:: set_proliferation_rate(self, proliferation_rate: float)


   .. py:method:: advance_cycle_clock(self, timestep: float) -> None

      Updates the cell cycle status based on the proliferation rate (may happen or not)


   .. py:method:: flag_for_proliferation(self) -> None

      Updates the cell cycle to proliferation (will always happen)


   .. py:method:: remove_proliferation_flag(self) -> None

      Updates the cell cycle to arrest (will always happen)


   .. py:method:: block_proliferation(self) -> None

      Activates the cycle block to avoid proliferation



.. py:class:: Death

   Represents the cell death status (alive/dead)

   .. py:attribute:: death_rate
      :annotation: :Optional[float]

      

   .. py:attribute:: death_signal
      :annotation: :bool

      

   .. py:attribute:: death_block
      :annotation: :bool

      

   .. py:method:: set_death_rate(self, death_rate: float) -> None


   .. py:method:: advance_death_clock(self, timestep: float) -> None

      Updates the cell status based on the death rate (may happen or not)


   .. py:method:: flag_for_death(self) -> None

      Updates the cell status to death (will always happen)


   .. py:method:: block_death(self) -> None



.. py:class:: Differentiation

   .. py:attribute:: differentiation_rate
      :annotation: :Optional[float]

      

   .. py:attribute:: differentiation_signal
      :annotation: :bool

      

   .. py:attribute:: differentiation_grade
      :annotation: :int

      

   .. py:attribute:: differentiation_block
      :annotation: :bool

      

   .. py:method:: set_differentiation_rate(self, differentiation_rate: float)


   .. py:method:: advance_differentiation_clock(self, timestep: float) -> None

      Updates the cell status based on the death rate (may happen or not)


   .. py:method:: increase_differentiation_grade(self)

      Updates the differentiation grade and resets the signal to allow differentiation


   .. py:method:: block_differentiation(self) -> None



.. py:class:: CellClocks

   .. py:attribute:: cycle_clock
      :annotation: :Cycle

      

   .. py:attribute:: death_clock
      :annotation: :Death

      

   .. py:attribute:: differentiation_clock
      :annotation: :Differentiation

      

   .. py:method:: set_proliferation_clock(self, proliferation_rate: float)


   .. py:method:: set_death_clock(self, death_rate: float)


   .. py:method:: set_differentiation_clock(self, differentiation_rate: float)


   .. py:method:: set_clocks(self, proliferation_rate: float, death_rate: float, differentiation_rate: float) -> None


   .. py:method:: get_clock_rates(self) -> Tuple[float, float, float]


   .. py:method:: advance_clocks(self, timestep: float)


   .. py:method:: block_all_clocks(self)



