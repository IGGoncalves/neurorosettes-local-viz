:py:mod:`neurorosettes.utilities`
=================================

.. py:module:: neurorosettes.utilities


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neurorosettes.utilities.Tissue
   neurorosettes.utilities.RectangularTissue
   neurorosettes.utilities.HexagonalTissue
   neurorosettes.utilities.Animator



Functions
~~~~~~~~~

.. autoapisummary::

   neurorosettes.utilities.get_random_position
   neurorosettes.utilities.get_random_unit_vector
   neurorosettes.utilities.get_simulation_timer



.. py:class:: Tissue(use_2d: bool = True)

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: get_coordinates(self) -> numpy.ndarray
      :abstractmethod:

      Returns the initial cell coordinates according to the tissue geometry



.. py:class:: RectangularTissue(size: float, spacing: float = 16.0, use_2d: bool = True)

   Bases: :py:obj:`Tissue`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: get_coordinates(self) -> numpy.ndarray

      Returns the initial cell coordinates according to the tissue geometry



.. py:class:: HexagonalTissue(size: float, spacing: float = 20.0, use_2d: bool = True)

   Bases: :py:obj:`Tissue`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: get_coordinates(self) -> numpy.ndarray

      Returns the initial cell coordinates according to the tissue geometry



.. py:function:: get_random_position(scaling_factor: float) -> numpy.ndarray

   Returns the coordinates for a random position between -scaling_factor and scaling factor.


.. py:function:: get_random_unit_vector(two_dimensions=False) -> numpy.ndarray

   Returns a vector for a random point in a unit sphere.


.. py:function:: get_simulation_timer(total_time: float, timestep: float) -> vedo.ProgressBar

   Returns a progress bar with the simulation time


.. py:class:: Animator

   .. py:method:: show(self, interactive: bool = False)


   .. py:method:: update_clock(self, time_point: float) -> None


   .. py:method:: add_grid(self, x_grid, y_grid)


   .. py:method:: set_camera(self, height: float)


   .. py:method:: draw_spring(self, base_point: numpy.ndarray, top_point: numpy.ndarray, radius: float)

      Plots a spring and a sphere to represent a neurite in vedo.


   .. py:method:: draw_sphere(self, center: numpy.ndarray, radius: float, **kwargs) -> vedo.Sphere

      Plots a sphere to represent a soma cell in vedo.



